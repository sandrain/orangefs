/*
 * (C) 2017 Clemson University.
 *
 * See LICENSE in src/client/jni directory.
 */
package org.orangefs.usrint;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class PVFS2STDIOJNITest 
{

	private static int fd;
	private static int dir_fd;
	private static long Opened_File_Stream;
	private static long Opened_Directory_Stream;

	public PVFS2STDIOJNI stdio;
	public PVFS2POSIXJNI posix;

	public PVFS2STDIOJNITest() {
		stdio = new PVFS2STDIOJNI();
		posix = new PVFS2POSIXJNI();
	}

	// @throws java.lang.Exception
	@BeforeClass
	public static void setUpBeforeClass() throws Exception 
	{

	}

	// @throws java.lang.Exception
	@AfterClass
	public static void tearDownAfterClass() throws Exception 
	{
		System.out.println("TEAR DOWN AFTER CLASS");
	}

	// @throws java.lang.Exception
	@Before
	public void setUp() throws Exception 
	{
		System.out.println("SETUP BEFORE TEST");
		//posix.rmdir("/mnt/orangefs/stdio_dir");
		//posix.unlink("/mnt/orangefs/stdio_file");

		// Create directory
		int ret = posix.mkdir("/mnt/orangefs/stdio_dir", posix.f.S_IRWXU);
		assertEquals(0, ret);
		// Create file
		fd = posix.creat("/mnt/orangefs/stdio_file", posix.f.S_IRWXU);
		assertTrue(fd > 0);
		// Open the directory Stream
		Opened_Directory_Stream = stdio.opendir("/mnt/orangefs/stdio_dir");
		assertTrue(Opened_Directory_Stream >= 0);
		// get the directory fd
		dir_fd = posix.open("/mnt/orangefs/stdio_dir", posix.f.O_RDWR, posix.f.S_IRWXU);
		// open the FILE Stream
		Opened_File_Stream = stdio.fopen("/mnt/orangefs/stdio_file", "r+");
		assertTrue(Opened_File_Stream >= 0);

		System.out.println("SET UP DONE");

	}

	// @throws java.lang.Exception
	@After
	public void tearDown() throws Exception 
	{
		System.out.println("TEAR DOWN AFTER TEST");
		stdio.fclose(Opened_File_Stream);
		posix.close(dir_fd);
		stdio.closedir(Opened_Directory_Stream);
		stdio.remove("/mnt/orangefs/stdio_file");
		posix.rmdir("/mnt/orangefs/stdio_dir");

		System.out.println("TEAR DOWN DONE");
	}

	@Test
	public final void testClearerr() 
	{
		// WILL NOT RETURN ANYTHING BUT HELPFUL FOR DEBUGGING
		stdio.clearerr(Opened_File_Stream);
	}

	@Test
	public final void testClearerrUnlocked() 
	{
		stdio.funlockfile(Opened_File_Stream);
		stdio.clearerrUnlocked(Opened_File_Stream);
	}

	@Test
	public final void testClosedir() 
	{
		int ret = stdio.closedir(Opened_Directory_Stream);
		assertEquals(ret, 0);
	}

	@Test
	public final void testDirfd() 
	{
		int ret = stdio.dirfd(Opened_Directory_Stream);
		// USEFUL FOR FUNCTIONS WHO DO NOT
		// DEPEND UPON OR ALTER FILE DESCRIPTOR
		// Non-negative file descriptor returned
		assertTrue(ret >= 0);
	}

	@Test
	public final void testFclose() 
	{
		int ret = stdio.fclose(Opened_File_Stream);
		assertEquals(0, ret);

	}

	@Test
	public final void testFcloseall() 
	{		
		//int ret = stdio.fcloseall();
		//assertEquals(0, ret);
		fail("Segfault occured");
	}

	@Test
	public final void testFdopen() 
	{
		long ret = stdio.fdopen(dir_fd, "r");
		assertTrue(ret != 0);
	}

	@Test
	public final void testFdopendir() 
	{
		long dir_p = stdio.fdopendir(dir_fd);
		assertTrue(dir_p != 0);
		System.out.println(dir_p);
	}

	@Test
	public final void testFeof() 
	{
		// since eof set
		int ret = stdio.feof(Opened_File_Stream);
		// IF RET == 0 THEN eof NOT REACHED,
		// OTHERWISE REACHED , ASSERTION ?
		// CURRENTLY EOF ALWAYS REACHED EVEN
		// IF CLEARERR IS SUCCESSFUL
		assertTrue(ret == 0 | ret != 0);
		// fail("Not yet implemented");
		int ret1 = stdio.feof(Opened_File_Stream);
		assertTrue(ret1 == 0 | ret != 0);
	}

	@Test
	public final void testFeofUnlocked() 
	{
		stdio.funlockfile(Opened_File_Stream);
		int ret = stdio.feofUnlocked(Opened_File_Stream);
		// fail("Not yet implemented");
	}

	@Test
	public final void testFerror() 
	{
		int ret1 = stdio.ferror(Opened_File_Stream);
		assertTrue(ret1 == 0);
	}

	@Test
	public final void testFerrorUnlocked() 
	{
		stdio.funlockfile(Opened_File_Stream);
		int ret = stdio.ferrorUnlocked(Opened_File_Stream);
		assertEquals(0, ret);
	}

	@Test
	public final void testFflush() 
	{
		// Discards buffered data fetched from underlying files
		// and forces write of all user-space
		// buffered data for given output
		int ret = stdio.fflush(Opened_File_Stream);
		assertEquals(0, ret);
	}

	@Test
	public final void testFflushUnlocked() 
	{
		//stdio.funlockfile(Opened_File_Stream);
		//stdio.fflushUnlocked(Opened_File_Stream);
		fail("Not yet implemented"); // TODO
	}

	// READS NEXT CHARACTER FROM STREAM AND RETURNS IT TO
	// AN UNSIGNED CHAR
	@Test
	public final void testFgetc() 
	{
		int c = 67;
		int ret_put = stdio.fputc(c, Opened_File_Stream);
		assertEquals(c, ret_put);
		// Seek to beginning
		int ret_seek = stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		assertEquals(0, ret_seek);
		// Get character's int or ASCII value
		long ret = stdio.fgetc(Opened_File_Stream);
		System.out.println(ret);
		assertEquals(c, ret);

	}

	@Test
	public final void testFgetcUnlocked() 
	{
		int c = 65;
		stdio.funlockfile(Opened_File_Stream);
		stdio.putc(c, Opened_File_Stream);
		//Return to beginning of stream to get c
		stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		int ret = stdio.fgetcUnlocked(Opened_File_Stream);
		System.out.println(ret);
		assertTrue(ret == c);
		//fail("Not yet implemented, returns EOF"); // TODO
	}

	@Test
	public final void testFgets() 
	{
		long offset = 0;
		int ret_put1 = stdio.fputs("HelloWorldcreatedfile", Opened_File_Stream);
		assertTrue(ret_put1 != 0);
		int ret_seek1 = stdio.fseek(Opened_File_Stream, offset,
				stdio.f.SEEK_SET);
		assertEquals(0, ret_seek1);
		String ret1 = stdio.fgets(1, Opened_File_Stream);
		System.out.println(ret1);
		
		//Doesn't work on temp file
	}

	@Test
	public final void testFgetsUnlocked() 
	{
		int size = 10;
		String ret = null;
		stdio.funlockfile(Opened_File_Stream);
		int tmp = stdio.fputsUnlocked("Testing", Opened_File_Stream);
		assertTrue(tmp != -1);
		stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		ret = stdio.fgetsUnlocked(size, Opened_File_Stream);
		assertTrue(ret != null);
		System.out.println("Returned String:" + ret);
	}

	@Test
	public final void testFileno() 
	{
		int ret1 = stdio.fileno(Opened_File_Stream);
		assertTrue(ret1 > 0);
	}

	@Test
	public final void testFilenoUnlocked() 
	{
		stdio.funlockfile(Opened_File_Stream);
		stdio.filenoUnlocked(Opened_File_Stream);
		// fail("Not yet implemented");
	}

	@Test
	public final void testFillPVFS2STDIOJNIFlags() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testFlockfile() 
	{
		// Waits for fp_open to be no longer locked by some other thread
		// then locks and increments count
		stdio.flockfile(Opened_File_Stream);
		System.out.println("Success");
		// fail("Not yet implemented");
	}

	// Modes can be r, r+, w, w+, a, a+
	@Test
	public final void testFopen() 
	{
		long ret = stdio.fopen("/mnt/orangefs/stdio_file", "r+");
		assertTrue(ret > 0);

		// File does not exist hence will be created
		long fp_openw = stdio.fopen("/mnt/orangefs/stdio_rdwr_create_test",
				"w+");
		assertTrue(fp_openw > 0);
		stdio.remove("/mnt/orangefs/stdio_rdwr_create_test");

	}

	@Test
	public final void testFputc() 
	{
		// ALREADY TESTED IN FGETC
		int c = 65;
		int ret1 = stdio.fputc(c, Opened_File_Stream);
		assertEquals(c, ret1);
		int ret = stdio.fputc(c, Opened_File_Stream);
		assertEquals(c, ret);
	}

	@Test
	public final void testFputcUnlocked() 
	{
		int c = 66;
		stdio.funlockfile(Opened_File_Stream);
		int ret = stdio.fputcUnlocked(c, Opened_File_Stream);
		assertTrue(ret != -1);
	}

	// WRITES STRING TO FILE WITHOUT TERMINATING CHARACTER
	@Test
	public final void testFputs() 
	{
		int ret1 = stdio.fputs("HELLO WORLD in", Opened_File_Stream);
		assertTrue(ret1 != 0);
	}

	@Test
	public final void testFputsUnlocked() 
	{
		String s = "Put Unlocked";
		stdio.funlockfile(Opened_File_Stream);
		int ret = stdio.fputsUnlocked(s, Opened_File_Stream);
		assertTrue(ret >= 0);
	}

	@Test
	public final void testFread() 
	{
		// Increase this buffer size
		int buf_size = 100;
		byte[] ptr = new byte[buf_size];
		long size = 8;
		long nmemb = 3;
		// READ 3 MEMBERS OF 8 BYTES
		// FROM FILE POINTED BY FD
		stdio.fread(ptr, size, nmemb, Opened_File_Stream);
	}

	@Test
	public final void testFreadUnlocked() 
	{
		int buf_size = 100;
		long size = 8;
		long nmemb = 3;
		byte[] ptr = new byte[buf_size];
		stdio.freadUnlocked(ptr, size, nmemb, Opened_File_Stream);
	}

	@Test
	public final void testFreopen() 
	{
		//long ret = stdio.freopen("/mnt/orangefs/stdio_file","r", Opened_File_Stream);
		//assertTrue(ret!=0);
		//System.out.println(ret);
		fail("Segfault");
	}

	@Test
	public final void testFseek() 
	{
		long offset = 0;
		int ret = stdio.fseek(Opened_File_Stream, offset, stdio.f.SEEK_SET);
		assertEquals(0, ret);

	}

	@Test
	public final void testFseeko() 
	{
		long offset = 50;
		long ret = stdio.fseeko(Opened_File_Stream, offset, stdio.f.SEEK_SET);
		assertEquals(0, ret);
	}

	@Test
	public final void testFtell() 
	{
		long ret = stdio.ftell(Opened_File_Stream);
		assertTrue(ret >= 0);
		System.out.println(ret);
	}

	@Test
	public final void testFtrylockfile() 
	{
		int ret = stdio.ftrylockfile(Opened_File_Stream);
		assertEquals(0, ret);
		stdio.funlockfile(Opened_File_Stream);
	}

	@Test
	public final void testFunlockfile() 
	{
		stdio.funlockfile(Opened_File_Stream);
		System.out.println("unlock_executed");
	}

	@Test
	public final void testFwrite() 
	{
		byte[] ptr = { 3, 5, 6 };
		long size = 4;
		long stream = Opened_File_Stream;
		// number of items to write
		long nmemb = 3;
		long ret = stdio.fwrite(ptr, size, nmemb, stream);
		// Returns number of items written
		assertEquals(nmemb, ret);
	}

	@Test
	public final void testFwriteUnlocked() 
	{
		byte[] ptr = { 3, 5, 6 };
		long size = 4;
		long stream = Opened_File_Stream;
		long nmemb = 3;
		long ret = stdio.fwriteUnlocked(ptr, size, nmemb, stream);
		assertEquals(nmemb, ret);
	}

	@Test
	public final void testGetc() 
	{	
		int c = 65;
		int c_open = 65;
		// put char in file opened in rw mode in order
		int ret_open = stdio.putc(c_open, Opened_File_Stream);
		// seek to beginning to get character
		stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		// Get character from open file
		int ret_get = stdio.getc(Opened_File_Stream);
		assertEquals(ret_open, ret_get);       
	}

	// Works but commented out to not have tests wait
	@Test
	public final void testGetchar() 
	{
		//GET CHARCTER FROM STANDARD INPUT
		//int ret = stdio.getchar();
		//System.out.println((char)ret);
	}

	@Test
	public final void testGetcharUnlocked() 
	{
		//Reads from stdin.  Does work
		//int ret = stdio.getcharUnlocked();
		//System.out.println((char)ret);
	}

	@Test
	public final void testGetcUnlocked() 
	{
		int c = 65;
		stdio.funlockfile(Opened_File_Stream);
		int ret_put = stdio.putcUnlocked(c, Opened_File_Stream);
		assertEquals(ret_put, c);
		int ret_seek = stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		assertEquals(ret_seek, 0);
		int ret_get = stdio.getcUnlocked(Opened_File_Stream);
		System.out.println(ret_get);
		assertEquals(ret_put, ret_get);
	}

    //Properly returned the files within dir.
	//No other info returned from function.
	@Test
	public final void testGetEntriesInDir() 
	{
		ArrayList<String> ret1 = stdio
				.getEntriesInDir("/mnt/orangefs");
		System.out.println(ret1);
	}

	@Test
	public final void testGetGid() 
	{
		//Tested in GetGroupname()
	}

	@Test
	public final void testGetGroupname() 
	{
		int Gid = stdio.getGid("root");
		String group = stdio.getGroupname(Gid);
		System.out.println(group);
	}

	@Test
	public final void testGetUid() 
	{
		// Tested in Getusername()
	}

	@Test
	public final void testGetUsername() 
	{
		// OUTPUT IS "root", so unsure why assert is false
        // But function does work
		// Tested with root user
		String username = "root";
		int uid = stdio.getUid(username);
		String user_ret = stdio.getUsername(uid);
		System.out.println(user_ret);
		//assertTrue(user_ret == username);
	}

	@Test
	public final void testGetw() 
	{
		int input = 66;
		stdio.putw(input, Opened_File_Stream);
		stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		int ret1 = stdio.getw(Opened_File_Stream);
		assertEquals(ret1, input);
	}

	@Test
	public final void testMkdtemp() 
	{
        String unique = stdio.mkdtemp("/mnt/orangefs/mkdtempXXXXXX");
        assertTrue(unique != null);
        stdio.remove(unique);
	}

	@Test
	public final void testMkstemp() 
	{
		// How to remove w/o knowing file path?
		int fd = stdio.mkstemp("/mnt/orangefs/mkstempXXXXXX");
	    assertTrue(fd >= 0);
	}

	@Test
	public final void testOpendir() 
	{
		// Tested in Setup()

	}

	// SAME AS FPUTC - MAY BE IMPLEMENTED AS A MACRO WHICH
	// EVALUATES Stream MORE THAN ONCE
	@Test
	public final void testPutc() 
	{
		int c = 65;
		int c_open = 65;
		// put char in file opened in rw mode in order
		int ret_put = stdio.putc(c_open, Opened_File_Stream);
		assertEquals(c_open, ret_put);
	}

	@Test
	public final void testPutchar() 
	{
		int c = 65;
		int ret = stdio.putchar(65);
		assertEquals(c, ret);
	}

	@Test
	public final void testPutcharUnlocked() 
	{
		int ret = stdio.putcharUnlocked(1);
		assertTrue(ret != -1);

	}

	@Test
	public final void testPutcUnlocked() 
	{
		int ret = stdio.putcUnlocked(65, Opened_File_Stream);
		assertTrue(ret == 65);
	}

	// WRITES STRING FOLLOWED BY NEWLINE TO STDOUT
	@Test
	public final void testPuts() 
	{
		int ret = stdio.puts("Hello from puts");
		assertTrue(ret != 0);

	}

	@Test
	public final void testPutw() 
	{
		int ret = stdio.putw(16, Opened_File_Stream);
		// SHOULD RETURN 0 BUT RETURNS 1 , FUNCTION WORKS
		System.out.println(ret);
		int ret_seek = stdio.fseek(Opened_File_Stream, 0, stdio.f.SEEK_SET);
		assertEquals(0, ret_seek);
		int ret1 = stdio.getw(Opened_File_Stream);
		System.out.println(ret1);

        //Doesnt work with temp file

	}

	@Test
	public final void testReaddir() 
	{
		long ret = stdio.readdir(Opened_Directory_Stream);
		assertEquals(0,ret);
	}

	// C side implementation
	@Test
	public final void testRecursiveDeleteDir() 
	{
		// Delete content inside this directory first
		// then attempt deletion of this directory
		fd = posix.creat("/mnt/orangefs/stdio_dir/test_file", posix.f.S_IRWXU);
		assertTrue(fd > 0);
		int ret = stdio.recursiveDeleteDir("/mnt/orangefs/stdio_dir");
		assertTrue(ret != -1);
	}

	// CALL UNLINK FOR FILE and RMDIR for directories
	@Test
	public final void testRemove() 
	{
		// Tested in TearDown()

	}

	@Test
	public final void testRewinddir() 
	{
		// Function returns no value
		// Sets position of directory stream to beginning
		// of directory
		stdio.rewinddir(Opened_Directory_Stream);
	}

	@Test
	public final void testSeekdir() 
	{
		long offset = stdio.telldir(Opened_Directory_Stream);
		System.out.println("offset =" + offset);
		stdio.seekdir(Opened_Directory_Stream, offset + 5);
		long offset_after = stdio.telldir(Opened_Directory_Stream);
		System.out.println("offset =" + offset_after);
		assertTrue(offset_after == offset + 1);
	}

	@Test
	public final void testTelldir() 
	{
		long ret = stdio.telldir(Opened_Directory_Stream);
		assertTrue(ret != -1);
		System.out.println(ret);
		stdio.seekdir(Opened_Directory_Stream, 2);
		long ret1 = stdio.telldir(Opened_Directory_Stream);
		System.out.println(ret1);

	}

	@Test
	public final void testTmpfile() 
	{
		// change fp to ret, use fp in set up test
		long ret = stdio.tmpfile();
		assertTrue(ret != 0);
		System.out.println(ret);
	}

	// PUSHES C BACK TO STREAM , RETURNS C ON SUCCESS
	@Test
	public final void testUngetc() 
	{
		int c = 65;
		int ret = stdio.ungetc(c, Opened_File_Stream);
		// Ret is EOF possibly because of this
		// functions execution order
		assertEquals(c, ret);
	}

}
