/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

/* leave first */
#include "pvfs2-config.h"

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "src/server/request-scheduler/request-scheduler.h"
#include "trove.h"
#include "pint-util.h"
#include "pvfs2-internal.h"
#include "pint-perf-counter.h"
#include "check.h"
#include "pint-uid-map.h"
#include "security-util.h"
#ifdef ENABLE_CAPCACHE
#include "capcache.h"
#endif
#ifdef ENABLE_CREDCACHE
#include "credcache.h"
#endif

/* prelude state machine:
 * This is a nested state machine that performs initial setup 
 * steps that are common to many server operations.
 * - post the request to the request scheduler
 * - check permissions
 */

%%

nested machine pvfs2_prelude_work_sm
{
    state req_sched
    {
        run prelude_req_sched;
        success => getattr_if_needed;
        default => return;
    }

    state getattr_if_needed
    {
        run prelude_getattr_if_needed;
        default => validate;
    }

    state validate
    {
        run prelude_validate;
        default => return;
    }
}

nested machine pvfs2_prelude_sm
{
    state setup
    {
        run prelude_setup;
        default => prelude_work;
    }

    state prelude_work
    {
        jump pvfs2_prelude_work_sm;
        default => return;
    }
}

%%

static PINT_sm_action prelude_setup(struct PINT_smcb *smcb,
                                    job_status_s *js_p)
{
    int ret;
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    gossip_debug(GOSSIP_MIRROR_DEBUG,
                 "Executing pvfs2_prelude_sm:prelude_setup...\n");
    gossip_debug(GOSSIP_MIRROR_DEBUG,
                 "\tbase frame:%d\tframe count:%d\n"
                 ,smcb->base_frame,smcb->frame_count);

    ret = PINT_server_req_get_object_ref(s_op->req,
                                         &s_op->target_fs_id,
                                         &s_op->target_handle);
    if( ret != 0 )
    {
        js_p->error_code = -PVFS_EINVAL;
    }

    s_op->access_type = PINT_server_req_get_access_type(s_op->req);
    s_op->sched_policy = PINT_server_req_get_sched_policy(s_op->req);


    /* add the user to the uid mgmt system */
/* TODO: not currently supported w/new security system
    ret = PINT_add_user_to_uid_mgmt(s_op->req->credentials.uid);
    if (ret != 0)
    {
        gossip_debug(GOSSIP_MIRROR_DEBUG, "Unable to add user id to uid"
                      "management interface\n");
    }
*/

    return SM_ACTION_COMPLETE;
}

/* prelude_req_sched()
 *
 * posts a request scheduler job
 */
static PINT_sm_action prelude_req_sched(struct PINT_smcb *smcb,
                                        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;

    gossip_debug(GOSSIP_MIRROR_DEBUG,
                 "Executing pvfs2_prelude_work_sm:prelude_req_sched\n");
    gossip_debug(GOSSIP_MIRROR_DEBUG,
                 "\tbase_frame:%d\tframe_count:%d\n"
                ,smcb->base_frame,smcb->frame_count);
    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "(%p) %s (prelude sm) state: req_sched\n", s_op,
                 PINT_map_server_op_to_string(s_op->req->op));

    PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DETAIL_DEBUG, "request\n");

    ret = job_req_sched_post(s_op->op,
                             s_op->target_fs_id,
                             s_op->target_handle,
                             s_op->access_type,
                             s_op->sched_policy,
                             smcb,
                             0,
                             js_p,
                             &(s_op->scheduled_id),
                             server_job_context);

    /* these are two different counters - one instantaneous, one cumulative */
    PINT_perf_count(PINT_server_pc, PINT_PERF_REQSCHED, 1, PINT_PERF_ADD);
    PINT_perf_count(PINT_server_pc, PINT_PERF_REQUESTS, 1, PINT_PERF_ADD);
    return ret;
}

/* prelude_getattr_if_needed()
 *
 * reads basic attributes of target object, if there is a particular
 * target object for the operation
 */
static PINT_sm_action prelude_getattr_if_needed(struct PINT_smcb *smcb,
                                                job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -PVFS_EINVAL;
    job_id_t tmp_id;

    PINT_ACCESS_DEBUG(s_op, GOSSIP_ACCESS_DETAIL_DEBUG, "start\n");

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "(%p) %s (prelude sm) state: getattr_if_needed\n", s_op,
                 PINT_map_server_op_to_string(s_op->req->op));

    /* if the handle is 0, that indicates that the request does not
     * operate on a specific handle, so there is nothing we can do
     * here
     */
    if (s_op->target_handle == PVFS_HANDLE_NULL)
    {
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    /* all other operations fall to this point and read basic
     * attribute information
     */
    memset(&(s_op->ds_attr), 0, sizeof(PVFS_ds_attributes));

    gossip_debug(GOSSIP_SERVER_DEBUG, "About to retrieve attributes "
                 "for handle %llu\n", llu(s_op->target_handle));

    ret = job_trove_dspace_getattr(s_op->target_fs_id,
                                   s_op->target_handle,
                                   smcb,
                                   &(s_op->ds_attr),
                                   0,
                                   js_p,
                                   &tmp_id,
                                   server_job_context,
                                   s_op->req->hints);

    return ret;
}

static void get_anon_ids(struct filesystem_configuration_s *fsconfig,
                         PVFS_uid *uid,
                         PVFS_gid *gid)
{
    *uid = fsconfig->exp_anon_uid;
    *gid = fsconfig->exp_anon_gid;
    return;
}

static int iterate_all_squash_wildcards(
                       struct filesystem_configuration_s *fsconfig,
                       PVFS_BMI_addr_t client_addr)
{
    int i;

    for (i = 0; i < fsconfig->all_squash_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, "BMI_query_addr_range %lld, %s\n",
                     lld(client_addr), fsconfig->all_squash_hosts[i]);

        if (BMI_query_addr_range(client_addr,
                                 fsconfig->all_squash_hosts[i],
                                 fsconfig->all_squash_netmasks[i]) == 1)
        {
            return 1;
        }
    }
    return 0;
}

static int iterate_root_squash_wildcards(
                        struct filesystem_configuration_s *fsconfig,
                        PVFS_BMI_addr_t client_addr)
{
    int i;

    /* check exceptions first */
    for (i = 0; i < fsconfig->root_squash_exceptions_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "BMI_query_addr_range %lld, %s, netmask: %i\n",
                     lld(client_addr),
                     fsconfig->root_squash_exceptions_hosts[i],
                     fsconfig->root_squash_exceptions_netmasks[i]);

        if (BMI_query_addr_range(
                           client_addr,
                           fsconfig->root_squash_exceptions_hosts[i], 
                           fsconfig->root_squash_exceptions_netmasks[i]) == 1)
        {
            /* in the exception list, do not squash */
            return 0;
        }
    }

    for (i = 0; i < fsconfig->root_squash_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "BMI_query_addr_range %lld, %s, netmask: %i\n",
                     lld(client_addr), fsconfig->root_squash_hosts[i],
                     fsconfig->root_squash_netmasks[i]);

        if (BMI_query_addr_range(
                           client_addr,
                           fsconfig->root_squash_hosts[i], 
                           fsconfig->root_squash_netmasks[i]) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/* Translate_ids will return 1 if it did some uid/gid squashing, 0 otherwise */
static int translate_ids(PVFS_fs_id fsid,
                         PVFS_uid uid,
                         PVFS_gid gid,
                         PVFS_uid *translated_uid,
                         PVFS_gid *translated_gid,
                         PVFS_BMI_addr_t client_addr)
{
    int exp_flags = 0;
    struct server_configuration_s *serv_config = NULL;
    struct filesystem_configuration_s * fsconfig = NULL;

    serv_config = PINT_server_config_mgr_get_config();

    fsconfig = PINT_config_find_fs_id(serv_config, fsid);
    if (fsconfig == NULL)
    {
        return 0;
    }

    exp_flags = fsconfig->exp_flags;
    /* If all squash was set */
    if (exp_flags & TROVE_EXP_ALL_SQUASH)
    {
        if (iterate_all_squash_wildcards(fsconfig, client_addr) == 1)
        {
            get_anon_ids(fsconfig, translated_uid, translated_gid);

            gossip_debug(GOSSIP_SERVER_DEBUG,
                         "Translated ids from <%u:%u> to <%u:%u>\n",
                         uid, gid, *translated_uid, *translated_gid);

            return 1;
        }
    }
    /* if only root squash was set translate uids for root alone*/
    if (exp_flags & TROVE_EXP_ROOT_SQUASH)
    {
        if (uid == 0 || gid == 0)
        {
            if (iterate_root_squash_wildcards(fsconfig, client_addr) == 1)
            {
                get_anon_ids(fsconfig, translated_uid, translated_gid);

                gossip_debug(GOSSIP_SERVER_DEBUG,
                             "Translated ids from <%u:%u> to <%u:%u>\n",
                             uid, gid, *translated_uid, *translated_gid);

                return 1;
            }
        }
    }
    /* no such translation required! */
    *translated_uid = uid;
    *translated_gid = gid;
    return 0;
}

static int iterate_ro_wildcards(struct filesystem_configuration_s *fsconfig,
                                PVFS_BMI_addr_t client_addr)
{
    int i;

    for (i = 0; i < fsconfig->ro_count; i++)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "BMI_query_addr_range %lld, %s\n",
                     lld(client_addr), fsconfig->ro_hosts[i]);

        /* Does the client address match the wildcard specification and/or */
        /* the netmask specification?                                      */
        if (BMI_query_addr_range(client_addr,
                                 fsconfig->ro_hosts[i],
                                 fsconfig->ro_netmasks[i]) == 1)
        {
            return 1;
        }
    }
    return 0;
}

/*
 * Return zero if this operation should be allowed.
 */
static int permit_operation(PVFS_fs_id fsid,
                            enum PINT_server_req_access_type access_type,
                            PVFS_BMI_addr_t client_addr)
{ 
    int exp_flags = 0; 
    struct server_configuration_s *serv_config = NULL;
    struct filesystem_configuration_s *fsconfig = NULL;

    if (access_type == PINT_SERVER_REQ_READONLY)
    {
        return 0;  /* anything that doesn't modify state is okay */
    }
    serv_config = PINT_server_config_mgr_get_config();

    fsconfig = PINT_config_find_fs_id(serv_config, fsid);
    if (fsconfig == NULL)
    {
        return 0;
    }

    exp_flags = fsconfig->exp_flags;
    /* cheap test to see if ReadOnly was even specified in the exportoptions */
    if (!(exp_flags & TROVE_EXP_READ_ONLY))
    {
        return 0;
    }
    /* Drat. Iterate thru the list of wildcards specified
     * in server_configuration and see
     * the client address matches. if yes, then we deny permission
     */
    if (iterate_ro_wildcards(fsconfig, client_addr) == 1)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG, 
                     "Disallowing read-write operation on a read-only exported file-system\n");
        return -EROFS;
    }
    return 0;
}

static PINT_sm_action prelude_validate(struct PINT_smcb *smcb,
                                       job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_credential *cred = NULL;
    int ret = -PVFS_EINVAL, capcache_hit = 0, credcache_hit = 0;
    DECLARE_PROFILER(profiler);

    /* Profile validate operation */
    INIT_PROFILER(profiler);
    START_PROFILER(profiler);

    /*
      first we translate the dspace attributes into a more convenient
      server use-able format.  i.e. a PVFS_object_attr
    */
    PVFS_ds_attr_to_object_attr(&s_op->ds_attr, &s_op->attr);
    s_op->attr.mask = PVFS_ATTR_COMMON_ALL;
    s_op->target_object_attr = &s_op->attr;

    if (s_op->prelude_mask & PRELUDE_PERM_CHECK_DONE)
    {
        gossip_debug(GOSSIP_SERVER_DEBUG,
                     "(%p) %s (prelude sm) perm check already done... "
                     "skipping.\n", s_op,
                     PINT_map_server_op_to_string(s_op->req->op));

        return SM_ACTION_COMPLETE;
    }

    PINT_debug_capability(&s_op->req->capability, "Received");

    if (s_op->target_fs_id != PVFS_FS_ID_NULL)
    {
        /*
         * if we are exporting a volume readonly, disallow any operation 
         * that modifies the state of the file-system.
         */
        if (permit_operation(s_op->target_fs_id,
                             s_op->access_type,
                             s_op->addr) < 0)
        {
            js_p->error_code = -PVFS_EROFS;
            return SM_ACTION_COMPLETE;
        }
    }

    PINT_server_req_get_credential(s_op->req, &cred);
    if (cred != NULL)
    {
#ifdef ENABLE_CREDCACHE
        credcache_hit = (PINT_credcache_lookup(cred) != NULL);

        gossip_debug(GOSSIP_SECURITY_DEBUG, "%s: cred cache %s\n", __func__,
                     (credcache_hit) ? "hit" : "miss");
#endif
        /* do not verify credential on credcache hit */
        ret = (credcache_hit) ? 1 : PINT_verify_credential(cred);

#ifdef ENABLE_CREDCACHE
        if (!credcache_hit && ret)
        {
            /* cache credential */
            PINT_credcache_insert(cred);
        }
#endif
        if (!ret)
        {
            char sig_buf[16];

            gossip_debug(GOSSIP_SECURITY_DEBUG, 
                         "Credential (%s) from %s failed verification.\n",
                         PINT_util_bytes2str(cred->signature, sig_buf, 4),
                         cred->issuer);

            /* have client try again on timeout */
            if (PINT_util_get_current_time() > cred->timeout)
            {
                js_p->error_code = -PVFS_EAGAIN;
            }
            else
            {
                js_p->error_code = -PVFS_EPERM;
            }
            
            return SM_ACTION_COMPLETE;
        }
    }

    if ((s_op->target_fs_id != PVFS_FS_ID_NULL) && (cred != NULL))
    {
        PVFS_uid uid, translated_uid;
        PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS], translated_gid;
        uint32_t num_groups;
        
        /* map the credential */
        ret = PINT_map_credential(cred, &uid, &num_groups, group_array);
        if (ret != 0)
        {
            js_p->error_code = ret;

            return SM_ACTION_COMPLETE;
        }

        /* Translate the uid and gid's in case we need to do some squashing 
         * based on the export and the client address
         */
        /* TODO: testing */
        if (translate_ids(s_op->target_fs_id,
                          uid, 
                          group_array[0],
                          &translated_uid, 
                          &translated_gid,
                          s_op->addr) == 1)
        {
            /* TODO: not applicable to certificates */
            /* modify the credential. doesn't support secondary groups */
            cred->userid = translated_uid;
            cred->group_array[0] = translated_gid;
            cred->num_groups = 1;

            /* nlmills: can't call PINT_cleanup_credential because
             * the issuer string points inside the message buffer.
             */
            free(cred->signature);
            cred->signature = NULL;
            ret = PINT_sign_credential(cred);
            if (ret)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }

            /* TODO: this needs to be reworked */
            /* certain requests rely on the request attributes having the
             * same uid/gid as the client 
             */
            if (s_op->req->op == PVFS_SERV_SETATTR)
            {
                s_op->req->u.setattr.attr.owner = translated_uid;
                s_op->req->u.setattr.attr.group = translated_gid;
            }
            else if (s_op->req->op == PVFS_SERV_MKDIR)
            {
                s_op->req->u.mkdir.attr.owner = translated_uid;
                s_op->req->u.mkdir.attr.group = translated_gid;
            }
            else if (s_op->req->op == PVFS_SERV_CREATE)
            {
                s_op->req->u.create.attr.owner = translated_uid;
                s_op->req->u.create.attr.group = translated_gid;
            }
        }
    }

    /* check capability cache for non-null capabilities */
#ifdef ENABLE_CAPCACHE
    capcache_hit = 1;
    if (!PINT_capability_is_null(&s_op->req->capability))
    {        
        capcache_hit = (PINT_capcache_lookup(&s_op->req->capability) != NULL);        
        gossip_debug(GOSSIP_SECURITY_DEBUG, "%s: cap cache %s!\n", __func__,
                     (capcache_hit) ? "hit" : "miss");
    }
#endif

    /* do not verify cap on cache hit */
    ret = (capcache_hit) ? 1 : PINT_verify_capability(&s_op->req->capability);

    /* check operation permissions */
    if (ret)
    {
        ret = PINT_perm_check(s_op);
        gossip_debug(GOSSIP_SERVER_DEBUG,"%s:return from PINT_perm_check=%d\n"
                                        ,__func__
                                        ,ret);
    }
    else
    {        
        char sig_buf[16]; 

        gossip_debug(GOSSIP_SECURITY_DEBUG, 
                     "Capability (%s) from %s failed verification.\n",
                     PINT_util_bytes2str(s_op->req->capability.signature,
                                         sig_buf, 4),
                     s_op->req->capability.issuer);

        /* have client try again on timeout */
        if (PINT_util_get_current_time() > s_op->req->capability.timeout)
        {
            js_p->error_code = -PVFS_EAGAIN;
        }
        else
        {
            js_p->error_code = -PVFS_EPERM;
        }
        
        return SM_ACTION_COMPLETE;
    }

    /* anything else we treat as a real error */
    if (js_p->error_code)
    {
        js_p->error_code = -PVFS_ERROR_CODE(-js_p->error_code);
        return SM_ACTION_COMPLETE;
    }

    js_p->error_code = ret;

    gossip_debug(GOSSIP_SERVER_DEBUG,
                 "(%p) %s (req=%d) (prelude sm) state: perm_check (status = %d)\n",
                 s_op, PINT_map_server_op_to_string(s_op->req->op),s_op->req->op,
                 js_p->error_code);

    FINISH_PROFILER("pv2", profiler, 1);
            
    return SM_ACTION_COMPLETE;
}


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */
