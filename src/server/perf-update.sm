/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/time.h>

#include "pvfs2-server.h"
#include "pvfs2-internal.h"
#include "pint-perf-counter.h"
#include "server-config.h"
#include "pint-security.h"

enum{ STOP_TIMER=15 };
%%

machine pvfs2_perf_update_sm
{
	state do_work 
	{
		run perf_update_do_work;
		success => do_work;
                STOP_TIMER => stop_timer;
		default => error;
	}

	state stop_timer 
	{
		run perf_update_stop_timer;
		default => terminate;
	}

	state error 
	{
		run perf_update_error;
		default => terminate;
	}
}

%%

/** perf_update_stop_timer()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static PINT_sm_action perf_update_stop_timer(struct PINT_smcb *smcb,
                                             job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_perf_finalize(s_op->u.perf_update.pc);

    return(server_state_machine_complete(smcb));
}

/** perf_update_error()
 *
 * cleans up any resources consumed by this state machine and ends
 * execution of the machine
 */
static PINT_sm_action perf_update_error(struct PINT_smcb *smcb,
                                        job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    gossip_err("Error: stopping server performance monitoring.\n");

    PINT_perf_finalize(s_op->u.perf_update.pc);

    return(server_state_machine_complete(smcb));
}

/** perf_update_do_work()
 *
 * resets counters, updates metrices, etc- this is intended to be called
 * repeatedly on a regular interval
 */
static PINT_sm_action perf_update_do_work(struct PINT_smcb *smcb,
                                          job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    job_id_t tmp_id;
    uint64_t current_mask = 0;
    int current_debug_on = 0;
    char* tmp_text;
    char* ptr;
    char* token;
    char delim[] = "\n";

#if 0
    PINT_STATE_DEBUG("do_work");
#endif
    
    /* log current statistics if the gossip mask permits */
    gossip_get_debug_mask(&current_debug_on, &current_mask);
    if(current_mask & GOSSIP_PERFCOUNTER_DEBUG)
    {
        tmp_text = PINT_perf_generate_text(s_op->u.perf_update.pc, 4096);
        if(tmp_text)
        {
            token = strtok_r(tmp_text, delim, &ptr);
            while(token)
            {
                gossip_perf_log("%s\n", token);
                token = strtok_r(NULL, delim, &ptr);
            }
            free(tmp_text);
        }
    }
    
    /* roll over to next set of statistics */
    /* These do nothing if passed NULL */
    PINT_perf_rollover(s_op->u.perf_update.pc);
    PINT_perf_rollover(s_op->u.perf_update.tpc);

    if (!s_op->u.perf_update.pc->running)
    {
        return STOP_TIMER;
    }
	
    /* post another timer */
    return(job_req_sched_post_timer(s_op->u.perf_update.pc->interval,
                                    smcb,
                                    0,
                                    js_p,
                                    &tmp_id,
                                    server_job_context));
}

static int perm_perf_update(PINT_server_op *s_op)
{
    int ret;

    ret = 0;

    return ret;
}

struct PINT_server_req_params pvfs2_perf_update_params =
{
    .string_name = "perf_update",
    .perm = perm_perf_update,
    .state_machine = &pvfs2_perf_update_sm
};


/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

