/* 
 * (C) 2001 Clemson University and The University of Chicago 
 *
 * See COPYING in top-level directory.
 */

#include <string.h>
#include <assert.h>

#include "pvfs2-config.h"

#include "server-config.h"
#include "pvfs2-server.h"
#include "pvfs2-attr.h"
#include "pvfs2-util.h"
#include "pvfs2-internal.h"
#include "pint-util.h"
#include "pint-security.h"
#include "pint-uid-map.h"
#include "pint-cached-config.h"
#include "dist-dir-utils.h"

enum
{
    STATE_METAFILE = 7,
    STATE_SYMLINK = 8,
    STATE_DIRDATA = 9,
    STATE_DIRECTORY = 10
};

%%

nested machine pvfs2_set_dirdata_attr_work_sm
{
    state set_dirdata_attr
    {
        run set_dirdata_attr_setup;
        success => run_tree_setattr;
        default => set_dirdata_attr_cleanup;
    }

    state run_tree_setattr
    {
        jump pvfs2_tree_setattr_work_sm;
        default => set_dirdata_attr_cleanup;
    }

    state set_dirdata_attr_cleanup
    {
        run setattr_set_dirdata_attr_cleanup;
        default => return;
    }
}


nested machine pvfs2_set_attr_work_sm
{
    state verify_attribs
    {
        run setattr_verify_attribs;
        STATE_METAFILE => write_metafile_datafile_handles_if_required;
        STATE_SYMLINK => write_symlink_target_if_required;
        STATE_DIRDATA => write_distr_dir_data_if_required;
        STATE_DIRECTORY => set_dirdata_attrs;
        success => setobj_attrib;
        default => work_cleanup;
    }

    state write_metafile_datafile_handles_if_required
    {
        run setattr_write_metafile_datafile_handles_if_required;
        success => write_metafile_distribution_if_required;
        default => work_cleanup;
    }

    state write_metafile_distribution_if_required
    {
        run setattr_write_metafile_distribution_if_required;
        success => setobj_attrib;
        default => work_cleanup;
    }

    state write_symlink_target_if_required
    {
        run setattr_write_symlink_target_if_required;
        success => setobj_attrib;
        default => work_cleanup;
    }

    state write_distr_dir_data_if_required
    {
        run setattr_write_distr_dir_data_if_required;
        success => setobj_attrib;
        default => work_cleanup;
    }

    state set_dirdata_attrs
    {
        jump pvfs2_set_dirdata_attr_work_sm;
        success => write_distr_dir_data_if_required;
        default => work_cleanup;
    }

    state setobj_attrib
    {
        run setattr_setobj_attribs;
        default => work_cleanup;
    }

    state work_cleanup
    {
        run setattr_work_cleanup;
        default => return;
    }
}

machine pvfs2_set_attr_with_prelude_sm
{
    state prelude
    {
        jump pvfs2_prelude_sm;
        success => do_work;
        default => return;
    }

    state do_work
    {
        jump pvfs2_set_attr_work_sm;
        default => return;
    }
}

machine pvfs2_set_attr_sm
{
    state work
    {
        jump pvfs2_set_attr_with_prelude_sm;
        default => final_response;
    }

    state final_response
    {
        jump pvfs2_final_response_sm;
        default => cleanup;
    }

    state cleanup
    {
        run setattr_cleanup;
        default => terminate;
    }
}

%%

static PINT_sm_action setattr_verify_attribs(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *a_p = NULL, *req_a_p = NULL;
    PVFS_credential *cred = &s_op->req->u.setattr.credential;
    PVFS_uid uid;
    uint32_t num_groups;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];
    char ostr[32], gstr[32];

    a_p = &s_op->attr;
    req_a_p = &s_op->req->u.setattr.attr;

    gossip_debug(GOSSIP_SETATTR_DEBUG, "  attrs read from dspace:\n\t"
                 "[owner = %d, group = %d, perms = %o, type = %d]\n",
                 a_p->owner, a_p->group, a_p->perms, a_p->objtype);

    PINT_perf_count(PINT_server_pc, PINT_PERF_SETATTR, 1, PINT_PERF_ADD);

    /* debug request attrs */
    if (req_a_p->mask & PVFS_ATTR_COMMON_UID)
    {
        if (req_a_p->owner == PVFS_UID_MAX)
        {
            strcpy(ostr, "(mapped)");
        }
        else
        {
            snprintf(ostr, sizeof(ostr), "%d", req_a_p->owner);
            ostr[sizeof(ostr)-1] = '\0';
        }
    }
    else
    {
        strcpy(ostr, "(none)");
    }
    if (req_a_p->mask & PVFS_ATTR_COMMON_GID)
    {
        if (req_a_p->group == PVFS_GID_MAX)
        {
            strcpy(gstr, "(mapped)");
        }
        else
        {
            snprintf(gstr, sizeof(gstr), "%d", req_a_p->group);
            gstr[sizeof(gstr)-1] = '\0';
        }
    }
    else
    {
        strcpy(gstr, "(none)");
    }
    gossip_debug(GOSSIP_SETATTR_DEBUG, "  attrs read from request:\n\t"
        "[owner = %s, group = %s, perms = %o, type = %d]\n", ostr, gstr, 
        (req_a_p->mask & PVFS_ATTR_COMMON_PERM) ? req_a_p->perms : -1,
        (req_a_p->mask & PVFS_ATTR_COMMON_TYPE) ? req_a_p->objtype : -1);

    /*
      here we're enforcing that no one can change the type of the
      handle/object already stored once it's been set to a non-zero
      value.  (zero is not a valid object type meaning that it hasn't
      been assigned yet)
    */
    if (a_p->objtype && req_a_p->objtype &&
        (a_p->objtype != req_a_p->objtype))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG, "  handle %llu is of type %d "
                     "and cannot be changed to type %d\n",
                     llu(s_op->req->u.setattr.handle),
                     a_p->objtype, s_op->req->u.setattr.attr.objtype);

        /* set an error to bail out of set-attr processing */
        js_p->error_code = -PVFS_EACCES;
        return SM_ACTION_COMPLETE;
    }
    else if (req_a_p->objtype == PVFS_TYPE_NONE)
    {
        /* if the requested object type is PVFS_TYPE_NONE, then the
         * setattr is only on the common attributes, so we use the
         * actual object type
         */
        req_a_p->objtype = a_p->objtype;
    }

    js_p->error_code = 0;

    if ((req_a_p->objtype == PVFS_TYPE_METAFILE) ||
        (a_p->objtype == PVFS_TYPE_METAFILE))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to a metafile\n",
                     llu(s_op->req->u.setattr.handle));

        gossip_debug(
            GOSSIP_SETATTR_DEBUG, " *** dspace has dfile count %d and "
            "req has dfile count %d\n",
            a_p->u.meta.dfile_count, req_a_p->u.meta.dfile_count);
        gossip_debug(
            GOSSIP_SETATTR_DEBUG, " *** dspace has dist size %d and "
            "req has dist size %d\n",
            a_p->u.meta.dist_size, req_a_p->u.meta.dist_size);

        /* copy the dfile count before writing this object */
        if (req_a_p->mask & PVFS_ATTR_META_DFILES)
        {
            gossip_debug(
                GOSSIP_SETATTR_DEBUG," *** using dfile_count of %d\n",
                req_a_p->u.meta.dfile_count);
            a_p->u.meta.dfile_count = req_a_p->u.meta.dfile_count;
            js_p->error_code = STATE_METAFILE;
        }
        else
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG,
                         " *** ignoring dfile_count of %d\n",
                         req_a_p->u.meta.dfile_count);
        }

        /* copy the dist size before writing this object */
        if (req_a_p->mask & PVFS_ATTR_META_DIST)
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG,
                         " *** using dist_size of %d\n",
                         req_a_p->u.meta.dist_size);
            a_p->u.meta.dist_size = req_a_p->u.meta.dist_size;
            js_p->error_code = STATE_METAFILE;
        }
        else
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG,
                         " *** ignoring dist_size of %d\n",
                         req_a_p->u.meta.dist_size);
        }
    }
    else if ((req_a_p->objtype == PVFS_TYPE_DATAFILE) ||
             (a_p->objtype == PVFS_TYPE_DATAFILE))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to a datafile\n",
                     llu(s_op->req->u.setattr.handle));
    }
    else if ((req_a_p->objtype == PVFS_TYPE_DIRECTORY) ||
             (a_p->objtype == PVFS_TYPE_DIRECTORY))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to a directory\n",
                     llu(s_op->req->u.setattr.handle));
        if((req_a_p->mask & PVFS_ATTR_DISTDIR_ATTR))
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG,
                    "  It's changing dist dir attrs\n.");
            PINT_dist_dir_attr_copyto(a_p->dist_dir_attr,
                                      req_a_p->dist_dir_attr);
            a_p->dist_dir_attr = req_a_p->dist_dir_attr;
            if (a_p->dist_dir_bitmap)
            {
                free(a_p->dist_dir_bitmap);
                a_p->dist_dir_bitmap = NULL;
            }
            a_p->dist_dir_bitmap = malloc(a_p->dist_dir_attr.bitmap_size *
                sizeof(PVFS_dist_dir_bitmap_basetype));
            if (! a_p->dist_dir_bitmap)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            memcpy(a_p->dist_dir_bitmap, req_a_p->dist_dir_bitmap,
                a_p->dist_dir_attr.bitmap_size * sizeof(PVFS_dist_dir_bitmap_basetype));

            if (a_p->dirdata_handles)
            {
                free(a_p->dirdata_handles);
                a_p->dirdata_handles = NULL;
            }
            a_p->dirdata_handles = malloc(a_p->dist_dir_attr.num_servers *
                sizeof(PVFS_handle));
            if (! a_p->dirdata_handles)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            memcpy(a_p->dirdata_handles, req_a_p->dirdata_handles,
                a_p->dist_dir_attr.num_servers * sizeof(PVFS_handle));

            a_p->mask |= PVFS_ATTR_DISTDIR_ATTR;
            js_p->error_code = STATE_DIRECTORY;
        }
    }
    else if ((req_a_p->objtype == PVFS_TYPE_SYMLINK) ||
             (a_p->objtype == PVFS_TYPE_SYMLINK))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to a symlink\n",
                     llu(s_op->req->u.setattr.handle));

        if (req_a_p->mask & PVFS_ATTR_SYMLNK_ALL)
        {
            assert(req_a_p->u.sym.target_path_len > 0);
            assert(req_a_p->u.sym.target_path);

            gossip_debug(GOSSIP_SETATTR_DEBUG,
                         " symlink links handle %llu to %s\n",
                         llu(s_op->req->u.setattr.handle),
                         req_a_p->u.sym.target_path);

            a_p->u.sym.target_path_len = req_a_p->u.sym.target_path_len;
            a_p->u.sym.target_path = req_a_p->u.sym.target_path;
        }
        js_p->error_code = STATE_SYMLINK;
    }
    else if ((req_a_p->objtype == PVFS_TYPE_DIRDATA) ||
             (a_p->objtype == PVFS_TYPE_DIRDATA))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to a dirdata object\n",
                     llu(s_op->req->u.setattr.handle));
        gossip_debug(
            GOSSIP_SETATTR_DEBUG, " *** dirdata has dirent server count %d and "
            "req has dirent server count %d\n",
            a_p->dist_dir_attr.num_servers, req_a_p->dist_dir_attr.num_servers);

        /* copy the distributed directory attributes before writing this object */
        if (req_a_p->mask & PVFS_ATTR_DISTDIR_ATTR)
        {

            PINT_dist_dir_attr_copyto(a_p->dist_dir_attr,
                                      req_a_p->dist_dir_attr);
            a_p->dist_dir_attr = req_a_p->dist_dir_attr;

            if (a_p->dist_dir_bitmap)
            {
                free(a_p->dist_dir_bitmap);
                a_p->dist_dir_bitmap = NULL;
            }
            a_p->dist_dir_bitmap = malloc(a_p->dist_dir_attr.bitmap_size *
                sizeof(PVFS_dist_dir_bitmap_basetype));
            if (! a_p->dist_dir_bitmap)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            memcpy(a_p->dist_dir_bitmap, req_a_p->dist_dir_bitmap,
                a_p->dist_dir_attr.bitmap_size * sizeof(PVFS_dist_dir_bitmap_basetype));

            if (a_p->dirdata_handles)
            {
                free(a_p->dirdata_handles);
                a_p->dirdata_handles = NULL;
            }
            a_p->dirdata_handles = malloc(a_p->dist_dir_attr.num_servers *
                sizeof(PVFS_handle));
            if (! a_p->dirdata_handles)
            {
                js_p->error_code = -PVFS_ENOMEM;
                return SM_ACTION_COMPLETE;
            }
            memcpy(a_p->dirdata_handles, req_a_p->dirdata_handles,
                a_p->dist_dir_attr.num_servers * sizeof(PVFS_handle));

            a_p->mask |= PVFS_ATTR_DISTDIR_ATTR;
            js_p->error_code = STATE_DIRDATA;
        }
        else
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG,
                         " *** ignoring distributed directory attributes\n");
        }
    }
    else
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "  handle %llu refers to something unknown\n",
                     llu(s_op->req->u.setattr.handle));

        js_p->error_code = -PVFS_EACCES;
    }

    /* note: verification of rights to change ownership info 
     * moved to perm_setattr() below 
     */

    /* map credential to owner/group */
    if (js_p->error_code >= 0 &&
        req_a_p->mask & (PVFS_ATTR_COMMON_UID|PVFS_ATTR_COMMON_GID) &&
        (req_a_p->owner == PVFS_UID_MAX || req_a_p->group == PVFS_GID_MAX))
    {
        int ret;

        ret = PINT_map_credential(cred, &uid, &num_groups, group_array);
        if (ret != 0)
        {
            js_p->error_code = ret;
            return SM_ACTION_COMPLETE;
        }

        /* use uid from credential as owner */
        if (req_a_p->mask & PVFS_ATTR_COMMON_UID &&
            req_a_p->owner == PVFS_UID_MAX)
        {
            req_a_p->owner = uid;
        }

        /* use primary gid from credential as group */
        if (req_a_p->mask & PVFS_ATTR_COMMON_GID &&
            req_a_p->group == PVFS_GID_MAX)
        {
            req_a_p->group = group_array[0];
        }
    }

    return SM_ACTION_COMPLETE;
}

static PINT_sm_action setattr_setobj_attribs(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = -1;
    job_id_t j_id;
    PVFS_object_attr *a_p = NULL;
    PVFS_object_attr *dspace_a_p = NULL;
    PVFS_ds_attributes *ds_attr = NULL;

    dspace_a_p = &s_op->attr;
    a_p = &s_op->req->u.setattr.attr;

    if (a_p->mask & PVFS_ATTR_META_DFILES)
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG, " request has dfile_count of "
                     "%d | dspace has %d\n",
                     s_op->req->u.setattr.attr.u.meta.dfile_count,
                     a_p->u.meta.dfile_count);

        gossip_debug(GOSSIP_SETATTR_DEBUG, " writing count of %d to "
                     "disk\n", dspace_a_p->u.meta.dfile_count);
    }
    /* 
     * Remember that mtime is versioned on disk! so convert it here..
     * It is better to do it here than change the PVFS_object_attr_overwrite_setable
     * macro, since there are many more users of it, I think.
     */
     if (a_p->mask & PVFS_ATTR_COMMON_MTIME_SET)
     {
         PVFS_time orig_mtime = a_p->mtime;
         a_p->mtime = PINT_util_mktime_version(orig_mtime);
         gossip_debug(GOSSIP_SETATTR_DEBUG, "setting version "
                 "to %llu\n\tmtime is %llu\n",
                 llu(a_p->mtime), llu(orig_mtime));
     }

    /* setattr changes metadata, and thus inherently sets CTIME
     * set the flag here and PVFS_object_attr_overwrite_setable will
     * take care of the rest. If all they did was access the file,
     * don't set the CTIME flag.
     */
    if ((a_p->objtype == PVFS_TYPE_METAFILE) ||
        (a_p->objtype == PVFS_TYPE_DIRECTORY))
    {
	if ((a_p->mask & PVFS_ATTR_COMMON_UID)  ||
            (a_p->mask & PVFS_ATTR_COMMON_GID)  ||
            (a_p->mask & PVFS_ATTR_COMMON_PERM) ||
            (a_p->mask & PVFS_ATTR_COMMON_MTIME))
               a_p->mask |= PVFS_ATTR_COMMON_CTIME;
    }

    /* if the object is a symbolic link, check to make sure that the request
     * is not attempting to change the permissions 
     */
    if(dspace_a_p->objtype == PVFS_TYPE_SYMLINK)
    {
        if ((dspace_a_p->perms != 0) &&
            ((a_p->mask & PVFS_ATTR_COMMON_PERM) && 
             (dspace_a_p->perms != a_p->perms)))
        {
            gossip_debug(GOSSIP_SETATTR_DEBUG, "Cannot change perms of symlink: Permission denied\n");
            js_p->error_code = -PVFS_EACCES;
            return SM_ACTION_COMPLETE;
        }
    }

    /*
      we have the attribs stored in the dspace, as well as the
      requested attribs to store.  overwrite the ones that are setable
      and specified by the mask value in the request; macro defined in
      pvfs2-storage.h
    */
    PVFS_object_attr_overwrite_setable(dspace_a_p, a_p);

    gossip_debug(
        GOSSIP_SETATTR_DEBUG,
        "  WRITING attrs: [owner = %d, group = %d\n\t"
        "perms = %o, type = %d, atime = %llu, mtime = %llu\n\t"
        "ctime = %llu | dfile_count = %d | dist_size = %d\n\t"
        "handle = %llu | S = %p | mask = %d]\n",
        dspace_a_p->owner, dspace_a_p->group, dspace_a_p->perms,
        dspace_a_p->objtype, llu(dspace_a_p->atime),
        llu(PINT_util_mkversion_time(dspace_a_p->mtime)), llu(dspace_a_p->ctime),
        (int)dspace_a_p->u.meta.dfile_count,
        (int)dspace_a_p->u.meta.dist_size,
        llu(s_op->req->u.setattr.handle), s_op, a_p->mask);

    /* translate attrs to storage attr format */
    ds_attr = &(s_op->ds_attr);
    PVFS_object_attr_to_ds_attr(dspace_a_p, ds_attr);

    ret = job_trove_dspace_setattr(
        s_op->req->u.setattr.fs_id, s_op->req->u.setattr.handle,
        ds_attr, 
        TROVE_SYNC,
        smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action setattr_write_metafile_datafile_handles_if_required(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = 0, dfile_count = 0;
    job_id_t j_id;

    /* reset from jump to here with STATE_METAFILE */
    js_p->error_code = 0;

    gossip_debug(GOSSIP_SETATTR_DEBUG,
                 " request has dfile_count of %d | dspace has %d\n",
                 s_op->req->u.setattr.attr.u.meta.dfile_count,
                 s_op->attr.u.meta.dfile_count);

    /* verify that the requested dfile count is sane */
    dfile_count = s_op->req->u.setattr.attr.u.meta.dfile_count;
    if ((dfile_count < 1) || (dfile_count > PVFS_REQ_LIMIT_DFILE_COUNT))
    {
        gossip_err("The requested dfile count of %d is invalid; "
                   "aborting operation.\n", dfile_count);
        js_p->error_code = -PVFS_EOVERFLOW;
        return SM_ACTION_COMPLETE;
    }

    /* set up key and value structure for keyval write */
    s_op->key.buffer = Trove_Common_Keys[METAFILE_HANDLES_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_HANDLES_KEY].size;

    gossip_debug(GOSSIP_SETATTR_DEBUG,
                 "  metafile has %d datafiles associated with it\n",
                 s_op->req->u.setattr.attr.u.meta.dfile_count);

    s_op->val.buffer = s_op->req->u.setattr.attr.u.meta.dfile_array;
    s_op->val.buffer_sz = dfile_count * sizeof(PVFS_handle);

    gossip_debug(
        GOSSIP_SETATTR_DEBUG, "  writing %s [%llu,%d,"
        "len %d]\n", (char *)s_op->key.buffer,
        llu(s_op->req->u.setattr.handle), s_op->req->u.setattr.fs_id,
        s_op->val.buffer_sz);

    /* we don't sync here since we're going to do it anyway in
     * write_metafile_distribution
     */
    ret = job_trove_keyval_write(
        s_op->req->u.setattr.fs_id, s_op->req->u.setattr.handle,
        &(s_op->key), &(s_op->val),
        0,
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action setattr_write_metafile_distribution_if_required(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = 0;
    job_id_t j_id;

    /* if we don't need to fill in the distribution, skip it */
    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_META_DIST))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "skipping distribution write\n");
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    /* set up key and value structure for keyval write */
    s_op->key.buffer = Trove_Common_Keys[METAFILE_DIST_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[METAFILE_DIST_KEY].size;

    gossip_debug(GOSSIP_SETATTR_DEBUG,
                 "  metafile distribution size = %d\n",
                 (int)s_op->req->u.setattr.attr.u.meta.dist_size);

    s_op->val.buffer_sz = s_op->req->u.setattr.attr.u.meta.dist_size;

    s_op->val.buffer = malloc(s_op->val.buffer_sz);
    if(!s_op->val.buffer)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    s_op->free_val = 1;
    
    PINT_dist_encode(s_op->val.buffer, 
                     s_op->req->u.setattr.attr.u.meta.dist);
    gossip_debug(
        GOSSIP_SERVER_DEBUG, "  writing %s [%llu,%d,"
        "len %d]\n", (char *)s_op->key.buffer,
        llu(s_op->req->u.setattr.handle), s_op->req->u.setattr.fs_id,
        s_op->val.buffer_sz);

    ret = job_trove_keyval_write(
        s_op->req->u.setattr.fs_id, s_op->req->u.setattr.handle,
        &(s_op->key), &(s_op->val),
        TROVE_SYNC,
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

static PINT_sm_action setattr_write_distr_dir_data_if_required(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = 0, num_servers = 0;
    job_id_t j_id;
    int i;

    /* reset from jump to here with STATE_DIRDATA or STATE_DIRECTORY */
    js_p->error_code = 0;

    /* if we don't need to write the distr_dir struct, skip it */
    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_DISTDIR_ATTR))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "skipping distr dir struct write\n");
        return SM_ACTION_COMPLETE;
    }

    /* verify that the requested number of servers is sane */
    num_servers = s_op->req->u.setattr.attr.dist_dir_attr.num_servers;
    if ((num_servers < 1) || (num_servers > PVFS_REQ_LIMIT_DIRENT_FILE_COUNT))
    {
        gossip_err("The requested number of servers (%d) is invalid; "
                   "aborting operation.\n", num_servers);
        js_p->error_code = -PVFS_EOVERFLOW;
        return SM_ACTION_COMPLETE;
    }

    /* update the fields within the structures that are specific to this server. */
    ret = PINT_update_dist_dir_bitmap_from_bitmap(
                &s_op->attr.dist_dir_attr,
                s_op->attr.dist_dir_bitmap,
                &s_op->req->u.setattr.attr.dist_dir_attr,
                s_op->req->u.setattr.attr.dist_dir_bitmap);
    if (ret != 0)
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "PINT_update_dist_dir_bitmap_from_bitmap error\n");
    }

    /* set up key and value structure for keyval write */
    int32_t keyval_count = 3;

    s_op->key_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->key_a)
    {
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->val_a = malloc(sizeof(PVFS_ds_keyval) * keyval_count);
    if(!s_op->val_a)
    {
        free(s_op->key_a);
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }

    s_op->key_a[0].buffer = Trove_Common_Keys[DIST_DIR_ATTR_KEY].key;
    s_op->key_a[0].buffer_sz = Trove_Common_Keys[DIST_DIR_ATTR_KEY].size;

    s_op->val_a[0].buffer = &s_op->attr.dist_dir_attr;
    s_op->val_a[0].buffer_sz = sizeof(PVFS_dist_dir_attr);

    s_op->key_a[1].buffer = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].key;
    s_op->key_a[1].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_BITMAP_KEY].size;

    s_op->val_a[1].buffer = s_op->attr.dist_dir_bitmap;
    s_op->val_a[1].buffer_sz = sizeof(PVFS_dist_dir_bitmap_basetype) * s_op->attr.dist_dir_attr.bitmap_size;

    s_op->key_a[2].buffer = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].key;
    s_op->key_a[2].buffer_sz = Trove_Common_Keys[DIST_DIRDATA_HANDLES_KEY].size;

    s_op->val_a[2].buffer = s_op->attr.dirdata_handles;
    s_op->val_a[2].buffer_sz = sizeof(PVFS_handle) * s_op->attr.dist_dir_attr.num_servers;

    for (i = 0; i < s_op->attr.dist_dir_attr.num_servers; i++)
    {
        if (s_op->attr.dirdata_handles[i] == s_op->req->u.setattr.handle)
        {
            break;
        }
    }

    if (i < s_op->attr.dist_dir_attr.num_servers)
    {
        PINT_dist_dir_set_serverno(i, &s_op->attr.dist_dir_attr,
                              s_op->attr.dist_dir_bitmap);
    }

    gossip_debug(GOSSIP_SETATTR_DEBUG,
            " setattr: writing dist-dir-struct keyvals for handle: %llu,\n"
            "\t with server_no=%d and branch_level=%d \n",
            llu(s_op->req->u.setattr.handle),
            s_op->attr.dist_dir_attr.server_no,
            s_op->attr.dist_dir_attr.branch_level);

    ret = job_trove_keyval_write_list(
        s_op->req->u.setattr.fs_id, s_op->req->u.setattr.handle,
        s_op->key_a, s_op->val_a,
        keyval_count,
        TROVE_SYNC,
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

/** functions for pvfs2_set_dirdata_attr_work_sm  **/

static PINT_sm_action set_dirdata_attr_setup(struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PVFS_object_attr *attr_p = NULL;
    PVFS_object_attr attr;
    struct PVFS_server_req *tree_setattr_req = NULL;
    struct PINT_server_op *tree_setattr_op = NULL;

    gossip_debug(GOSSIP_SETATTR_DEBUG, "setattr state: set_dirdata_attr_setup\n");

    /* get attr from request. */
    memcpy(&attr, &s_op->req->u.setattr.attr, sizeof(attr));
    attr.objtype = PVFS_TYPE_DIRDATA;

    gossip_debug(GOSSIP_SETATTR_DEBUG, "  SENDING attrs to dirdata\n");

    tree_setattr_req = malloc(sizeof(struct PVFS_server_req));
    if (! tree_setattr_req)
    {
        gossip_err("Unable to allocate tree_setattr_req\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(tree_setattr_req, 0, sizeof(*tree_setattr_req));

    attr_p = &s_op->attr;

    PINT_SERVREQ_TREE_SETATTR_FILL(
        *tree_setattr_req,
        s_op->req->capability,
        s_op->req->u.setattr.credential,
        s_op->req->u.setattr.fs_id,
        PVFS_TYPE_DIRDATA,
        attr,
        0,
        attr_p->dist_dir_attr.num_servers,
        attr_p->dirdata_handles,
        NULL);

    tree_setattr_op = malloc(sizeof(struct PINT_server_op));
    if (! tree_setattr_op)
    {
        gossip_err("Unable to allocate tree_setattr_op\n");
        js_p->error_code = -PVFS_ENOMEM;
        return SM_ACTION_COMPLETE;
    }
    memset(tree_setattr_op, 0, sizeof(*tree_setattr_op));
    tree_setattr_op->req = tree_setattr_req;
    tree_setattr_op->op = PVFS_SERV_TREE_SETATTR;

    PINT_sm_push_frame(smcb, 0, tree_setattr_op);
    return SM_ACTION_COMPLETE;
}

static PINT_sm_action setattr_set_dirdata_attr_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *tree_setattr_op = NULL;
    int task_id = 0;
    int remaining;

    tree_setattr_op = PINT_sm_pop_frame(smcb, &task_id, &js_p->error_code, &remaining);

    PINT_free_object_attr(&tree_setattr_op->req->u.tree_setattr.attr);
    free(tree_setattr_op->req);
    free(tree_setattr_op);

    return SM_ACTION_COMPLETE;
}

/**   end of functions for pvfs2_set_dirdata_attr_work_sm     */

static PINT_sm_action setattr_write_symlink_target_if_required(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    int ret = 0;
    job_id_t j_id;

    /* if we don't need to fill in the symlink target, skip it */
    if (!(s_op->req->u.setattr.attr.mask & PVFS_ATTR_SYMLNK_TARGET))
    {
        gossip_debug(GOSSIP_SETATTR_DEBUG,
                     "skipping symlink target write\n");
        js_p->error_code = 0;
        return SM_ACTION_COMPLETE;
    }

    assert(s_op->req->u.setattr.attr.u.sym.target_path_len > 0);
    assert(s_op->req->u.setattr.attr.u.sym.target_path);

    /* set up key and value structure for keyval write */
    s_op->key.buffer = Trove_Common_Keys[SYMLINK_TARGET_KEY].key;
    s_op->key.buffer_sz = Trove_Common_Keys[SYMLINK_TARGET_KEY].size;

    gossip_debug(GOSSIP_SETATTR_DEBUG,
                 "  symlink target_path_len = %d\n",
                 s_op->req->u.setattr.attr.u.sym.target_path_len);

    s_op->val.buffer = s_op->req->u.setattr.attr.u.sym.target_path;
    s_op->val.buffer_sz = s_op->req->u.setattr.attr.u.sym.target_path_len;

    gossip_debug(GOSSIP_SETATTR_DEBUG, "  writing %s [%llu,%d,"
                 "len %d]\n", (char *)s_op->key.buffer,
                 llu(s_op->req->u.setattr.handle),
                 s_op->req->u.setattr.fs_id,
                 s_op->val.buffer_sz);

    ret = job_trove_keyval_write(
        s_op->req->u.setattr.fs_id, s_op->req->u.setattr.handle,
        &(s_op->key), &(s_op->val),
        TROVE_SYNC,
        NULL, smcb, 0, js_p, &j_id, server_job_context, s_op->req->hints);

    return ret;
}

/*
 * Function: setattr_work_cleanup
 *
 * Params:   server_op *b,
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *
 */
static PINT_sm_action setattr_work_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);

    PINT_free_object_attr(&s_op->attr);

    if(s_op->free_val)
    {
        free(s_op->val.buffer);
    }

    if(s_op->key_a)
    {
        free(s_op->key_a);
    }

    if(s_op->val_a)
    {
        free(s_op->val_a);
    }
    return SM_ACTION_COMPLETE;
}

/*
 * Function: setattr_cleanup
 *
 * Params:   server_op *b, 
 *           job_status_s *js_p
 *
 * Returns:  int
 *
 * Synopsis: free memory and return
 *           
 */
static PINT_sm_action setattr_cleanup(
        struct PINT_smcb *smcb, job_status_s *js_p)
{
    struct PINT_server_op *s_op = PINT_sm_frame(smcb, PINT_FRAME_CURRENT);
    PINT_perf_timer_end(PINT_server_tpc, PINT_PERF_TSETATTR, &s_op->start_time);
    return(server_state_machine_complete(smcb));
}

#define PERM_STATIC  0x00FF0000
#define PERM_SETATTR PINT_CAP_SETATTR
#define PERM_RWS     (PINT_CAP_READ|PINT_CAP_WRITE|PINT_CAP_SETATTR)
#define PERM_WS      (PINT_CAP_WRITE|PINT_CAP_SETATTR)

#define PERM_TABLE_COUNT   12
#define PERM_TABLE_ATTR     0
#define PERM_TABLE_PERM     1

static int perm_setattr(PINT_server_op *s_op)
{
    /* permissions required for specified attributes
       if entries are added, update PERM_TABLE_COUNT above */
    uint32_t perm_table[][2] = { {PVFS_ATTR_COMMON_UID, PERM_SETATTR},
                                 {PVFS_ATTR_COMMON_GID, PERM_SETATTR},
                                 {PVFS_ATTR_COMMON_PERM, PERM_SETATTR},
                                 {PVFS_ATTR_META_DFILES, PERM_STATIC},
                                 {PVFS_ATTR_META_DIST, PERM_STATIC},
                                 {PVFS_ATTR_DISTDIR_ATTR, PERM_STATIC},
                                 {PVFS_ATTR_SYMLNK_ALL, PERM_SETATTR},
                                 {PVFS_ATTR_COMMON_ATIME, PERM_RWS},
                                 {PVFS_ATTR_COMMON_ATIME_SET, PERM_SETATTR},
                                 {PVFS_ATTR_COMMON_MTIME, PERM_WS},
                                 {PVFS_ATTR_COMMON_MTIME_SET, PERM_WS},
                                 {PVFS_ATTR_COMMON_CTIME, PERM_WS}
                               };

    PVFS_object_attr *attr = &s_op->attr;
    PVFS_object_attr *req_attr = &s_op->req->u.setattr.attr;
    PVFS_credential *cred = &s_op->req->u.setattr.credential;
    PVFS_uid uid;
    PVFS_gid group_array[PVFS_REQ_LIMIT_GROUPS];
    uint32_t num_groups = PVFS_REQ_LIMIT_GROUPS, i;

    /* attrs may always be set for a file with uninitialized metadata */
    if (attr->u.meta.dfile_count == 0 && attr->u.meta.dist == NULL &&
        attr->owner == 0)
    {
        return 0;
    }

    gossip_debug(GOSSIP_SETATTR_DEBUG, "%s: attr mask = %08x\n", 
                 __func__, req_attr->mask);

    /* check set attrs against perm table */
    for (i = 0; i < PERM_TABLE_COUNT; i++)
    {
        if (req_attr->mask & perm_table[i][PERM_TABLE_ATTR])
        {
            /* check permission for this attr */
            if (perm_table[i][PERM_TABLE_PERM] == PERM_STATIC)
            {
                /* static attributes can only be changed on new files */
                gossip_err("%s: attempt to set static attribute 0x%x\n", __func__,
                           perm_table[i][PERM_TABLE_ATTR]);
            }
            else if (!(s_op->req->capability.op_mask & perm_table[i][PERM_TABLE_PERM]))
            {
                gossip_debug((GOSSIP_SETATTR_DEBUG|GOSSIP_SECURITY_DEBUG), 
                             "%s: no permissions to set attr 0x%x\n", __func__, 
                             perm_table[i][PERM_TABLE_ATTR]);
                return -PVFS_EACCES;
            }
        }
    }

    /* if changing owner info, user must have admin rights, 
     * or be changing owner info to self or a member group.
     * note: you can only "change" the UID of a file you own to 
     * yourself if you are not admin. This is consistent with chown. 
     */
    if (req_attr->mask & (PVFS_ATTR_COMMON_UID|PVFS_ATTR_COMMON_GID) &&
        !(s_op->req->capability.op_mask & PINT_CAP_ADMIN))
    {
        /* map the credential to the user info */
        int ret = PINT_map_credential(cred, &uid, &num_groups, group_array);
        if (ret != 0)
        {
            return ret;
        }

        /* check current owner */
        if (attr->owner != uid)
        {
            gossip_debug((GOSSIP_SETATTR_DEBUG|GOSSIP_SECURITY_DEBUG),
                         "%s: only owner of a file can change its "
                         "ownership\n", __func__);
            return -PVFS_EPERM;
        }

        /* verify that the user is changing owner to self */
        if (req_attr->mask & PVFS_ATTR_COMMON_UID &&
            uid != req_attr->owner)
        {
            gossip_debug((GOSSIP_SETATTR_DEBUG|GOSSIP_SECURITY_DEBUG),
                         "%s: non-admin may only change owner to self\n",
                         __func__);
            return -PVFS_EPERM;
        }

        /* verify that the user has permission to change the file's group 
         * note: you may "change" group to same group with no error even
         * if you are not a member
         */
        if (req_attr->mask & PVFS_ATTR_COMMON_GID &&
            attr->group != req_attr->group)
        {
            for (i = 0; i < num_groups; i++)
            {
                if (group_array[i] == req_attr->group)
                {
                    break;
                }
            }
            /* no group matches */
            if (i >= num_groups)
            {
                gossip_debug((GOSSIP_SETATTR_DEBUG|GOSSIP_SECURITY_DEBUG),
                             "%s: only members of a group may change ownership "
                             "to that group\n", __func__);
                return -PVFS_EPERM;
            }
        }
    }

    return 0;
}

PINT_GET_OBJECT_REF_DEFINE(setattr);
PINT_GET_CREDENTIAL_DEFINE(setattr);

struct PINT_server_req_params pvfs2_set_attr_params =
{
    .string_name = "setattr",
    .perm = perm_setattr,
    .access_type = PINT_server_req_modify,
    .sched_policy = PINT_SERVER_REQ_SCHEDULE,
    .get_object_ref = PINT_get_object_ref_setattr,
    .get_credential = PINT_get_credential_setattr,
    .state_machine = &pvfs2_set_attr_sm
};

/*
 * Local variables:
 *  mode: c
 *  c-indent-level: 4
 *  c-basic-offset: 4
 * End:
 *
 * vim: ft=c ts=8 sts=4 sw=4 expandtab
 */

